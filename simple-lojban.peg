# camxes.js.peg
# Copyright (c) 2013, 2014 Masato Hagiwara
# https://github.com/mhagiwara/camxes.js
#
# camxes.js can be used, modified, and re-distributed under MIT license.
# See LICENSE for the details.

# This is a Parsing Expression Grammar for Lojban.
# See http://bford.info/packrat/
#
# All rules have the form:
#
#     name = peg_expression
#
# which means that the grammatical construct "name" is parsed using
# "peg_expression".
#
# 1)  Names in lower case are grammatical constructs.
# 2)  Names in UPPER CASE are selma'o (lexeme) names, and are terminals.
# 3)  Concatenation is expressed by juxtaposition with no operator symbol.
# 4)  / represents *ORDERED* alternation (choice).  If the first
#     option succeeds, the others will never be checked.
# 5)  ? indicates that the element to the left is optional.
# 6)  * represents optional repetition of the construct to the left.
# 7)  + represents one_or_more repetition of the construct to the left.
# 8)  () serves to indicate the grouping of the other operators.
#
# Longest match wins.

# How to compile using Node.js: (Added by Masato Hagiwara)

# // load peg.js and the file system module
# > var PEG = require("pegjs")
# > var fs = require("fs")
# // read peg and build a parser
# > var camxes_peg = fs.readFileSync("/path/to/camxes.js.peg").toString();
# > var camxes = PEG.buildParser(camxes_peg, {cache: true});
# // test it
# > camxes.parse("ko'a broda");
# [ 'text',
#   [ 'text_1',
#     [ 'paragraphs', [Object] ] ] ]
# // write to a file
# > fs.writeFileSync("/path/to/camxes.js", camxes.toSource());


# ___ GRAMMAR ___



text <- intro_null NAI_clause* text_part_2 (!gek joik_jek)? text_1? EOF?

intro_null <- spaces?

text_part_2 <- (CMEVLA_clause+ / indicators?) free*

# Please note that the "text_1" item in the text_1 production does
# *not* match the BNF. This is due to a bug in the BNF.  The change
# here was made to match grammar.300
text_1 <- I_clause (jek / joik)? (stag? BO_clause)? free* text_1? / paragraphs

paragraphs <- paragraph?

paragraph <- (statement / fragment) (I_clause !jek !joik !joik_jek free* (statement / fragment)?)*

statement <- statement_1 / prenex statement

statement_1 <- statement_2 (I_clause joik_jek statement_2?)*

statement_2 <- statement_3 (I_clause (jek / joik)? stag? BO_clause free* statement_2?)?

statement_3 <- sentence

# BETA: NA sequence fragments
fragment <- prenex / terms VAU_elidible free* / ek free* / gihek free* / quantifier / (NA_clause !JA_clause free*)+ / relative_clauses / links / linkargs

prenex <- terms ZOhU_clause free*

#; sentence = (terms CU_clause? free*)? bridi_tail / bridi_tail

# BETA: JACU, JE.I
sentence <- terms? bridi_tail_t1 (joik_jek bridi_tail / joik_jek stag? KE_clause free* bridi_tail KEhE_elidible free*)* (joik_jek I_clause free* subsentence)*

# BETA: JACU
bridi_tail_t1 <- bridi_tail_t2 (joik_jek stag? KE_clause free* bridi_tail KEhE_elidible free*)?

# BETA: JACU
bridi_tail_t2 <- bridi_tail (joik_jek stag? BO_clause free* bridi_tail)?


sentence_start <- I_pre

subsentence <- sentence / prenex subsentence

# BETA: JACU
bridi_tail <- bridi_tail_1 ((gihek / joik_jek) stag? KE_clause free* bridi_tail KEhE_elidible free* tail_terms)?

bridi_tail_start <- ME_clause / NU_clause / NA_clause !KU_clause / NAhE_clause !BO_clause / selbri / tag bridi_tail_start / KE_clause bridi_tail_start / bridi_tail

# BETA: JACU
bridi_tail_1 <- bridi_tail_2 ((gihek / joik_jek) !(stag? BO_clause) !(stag? KE_clause) free* bridi_tail_2 tail_terms)*  #: LR2

# BETA: JACU
bridi_tail_2 <- CU_elidible free* bridi_tail_3 ((gihek / joik_jek) stag? BO_clause free* bridi_tail_2 tail_terms)?

# BETA: JACU
bridi_tail_3 <- (terms CU_elidible)* selbri tail_terms / gek_sentence

gek_sentence <- gek subsentence gik subsentence tail_terms / tag* KE_clause free* gek_sentence KEhE_elidible free* / NA_clause free* gek_sentence

tail_terms <- terms? VAU_elidible free*

terms <- terms_1+

#; terms_1 = terms_2

#; terms_2 = term

terms_1 <- terms_2

terms_2 <- term

#;term = sumti / ( !gek (tag / FA_clause free*) (sumti / KU_elidible free*) ) / termset / NA_clause KU_clause free*

term <- term_1

# BEGIN BETA: TERM JA TERM
term_1 <- term_2 (joik_ek !tag_bo_ke_bridi_tail term_2)*

tag_bo_ke_bridi_tail <- stag (BO_clause / KE_clause) CU_elidible free* (selbri / gek_sentence)

term_2 <- term_3 (joik_ek? stag? BO_clause term_3)*

term_3 <- sumti / tag_term / nontag_adverbial / termset

tag_term <- !gek (tag !(!tag selbri) / FA_clause free*) (sumti / KU_elidible free*)

nonabs_term <- nonabs_term_1

nonabs_term_1 <- nonabs_term_2 (joik_ek !tag_bo_ke_bridi_tail term_2)*

nonabs_term_2 <- nonabs_term_3 (joik_ek? stag? BO_clause term_3)*

nonabs_term_3 <- sumti / nonabs_tag_term / nontag_adverbial / termset

nonabs_tag_term <- !gek (tag !(!tag selbri) / FA_clause free*) (sumti / KU_elidible free*)

nontag_adverbial <- NA_clause free* KU_clause free*
# END BETA: TERM JA TERM

term_start <- term_1 / LA_clause / LE_clause / LI_clause / LU_clause / LAhE_clause / quantifier term_start / gek sumti gik / FA_clause / tag term_start

# BETA: KE-termset
termset <- gek_termset / KE_clause terms KEhE_elidible

gek_termset <- gek terms_gik_terms

terms_gik_terms <- nonabs_term (gik / terms_gik_terms) nonabs_term

sumti <- sumti_1

sumti_1 <- sumti_2 (joik_ek stag? KE_clause free* sumti KEhE_elidible free*)?

sumti_2 <- sumti_3 (joik_ek sumti_3)*  #: LR2

sumti_3 <- sumti_4 (joik_ek stag? BO_clause free* sumti_3)?

sumti_4 <- sumti_5 / gek sumti gik sumti_4

sumti_5 <- quantifier? sumti_6 relative_clauses? / quantifier selbri KU_elidible free* relative_clauses?

# BETA: NAhE+SUMTI, LAhE+TERM
sumti_6 <- ZO_clause free* / ZOI_clause free* / LOhU_clause free* / lerfu_string !MOI_clause BOI_elidible free* / LU_clause text LIhU_elidible free* / (LAhE_clause free* / NAhE_clause BO_clause? free*) (relative_clauses? sumti / term) LUhU_elidible free* / KOhA_clause free* / LA_clause free* relative_clauses? CMEVLA_clause+ free* / (LA_clause / LE_clause) free* sumti_tail KU_elidible free* / li_clause

li_clause <- LI_clause free* mex LOhO_elidible free*

sumti_tail <- (sumti_6 relative_clauses?)? sumti_tail_1 / relative_clauses sumti_tail_1

sumti_tail_1 <- selbri relative_clauses? / quantifier selbri relative_clauses? / quantifier sumti

# BETA: JAPOI
relative_clauses <- relative_clause (joik_jek free* relative_clause)* / gek relative_clauses gik relative_clauses

#; relative_clause = GOI_clause free* term GEhU_clause? free* / NOI_clause free* subsentence KUhO_clause? free*

relative_clause <- relative_clause_1

relative_clause_1 <- GOI_clause free* nonabs_term GEhU_elidible free* / NOI_clause free* subsentence KUhO_elidible free*

relative_clause_start <- GOI_clause / NOI_clause

selbri <- tag? selbri_1

selbri_1 <- selbri_2 / NA_clause free* selbri

selbri_2 <- selbri_3 (CO_clause free* selbri_2)?

selbri_3 <- selbri_4+  #: LR

selbri_4 <- selbri_5 (joik_jek selbri_5 / joik stag? KE_clause free* selbri_3 KEhE_elidible free*)*  #: LR2

selbri_5 <- selbri_6 ((jek / joik) stag? BO_clause free* selbri_5)?

selbri_6 <- tanru_unit (BO_clause free* selbri_6)? / NAhE_clause? free* guhek selbri gik selbri_6

tanru_unit <- tanru_unit_1

tanru_unit_1 <- tanru_unit_2 linkargs?

# ** zei is part of BRIVLA_clause

# BETA: Bare MEX
tanru_unit_2 <- BRIVLA_clause free* / GOhA_clause free* / KE_clause free* selbri_3 KEhE_elidible free* / ME_clause free* (sumti / lerfu_string) MEhU_elidible free* MOI_clause? free* / mex MOI_clause free* / SE_clause free* tanru_unit_2 / NAhE_clause free* tanru_unit_2 / NU_clause NAI_clause? free* (joik_jek NU_clause NAI_clause? free*)* subsentence KEI_elidible free*

#; linkargs = BE_clause free* term links? BEhO_clause? free*

linkargs <- linkargs_1

linkargs_1 <- BE_clause free* nonabs_term links? BEhO_elidible free*



linkargs_start <- BE_clause

#; links = BEI_clause free* term links?

links <- links_1

links_1 <- BEI_clause free* nonabs_term links?



links_start <- BEI_clause

# BEGIN BETA: MEX simplification
quantifier <- !selbri !sumti_6 mex

#;mex = mex_1 (operator mex_1)* / rp_clause

mex <- mex_1 (operator mex_1)*

mex_1 <- mex_2 (operator stag? BO_clause free* mex_1)?

mex_2 <- number BOI_elidible free* / lerfu_string BOI_elidible free* / gek mex gik mex_2 / (LAhE_clause free* / NAhE_clause free* BO_clause? free*) mex LUhU_elidible free*

# END BETA: MEX simplification

#; operator = operator_1 (joik_jek operator_1 / joik stag? KE_clause free* operator KEhE_clause? free*)*

operator <- operator_0

operator_0 <- operator_1 (joik_jek operator_1 / joik stag? KE_clause free* operator KEhE_elidible free*)*



operator_start <- guhek / KE_clause / SE_clause? NAhE_clause

# BETA: MEX simplification
operator_1 <- guhek operator_1 gik operator_2 / operator_2 (jek / joik) stag? BO_clause free* operator_1 / operator_2

operator_2 <- mex_operator / KE_clause free* operator KEhE_elidible free*

# BETA: MEX simplification
mex_operator <- SE_clause free* mex_operator / NAhE_clause free* mex_operator / joik_jek free* / ek free*

#; operand = operand_1 (joik_ek stag? KE_clause free* operand KEhE_clause? free*)?

operand <- operand_0

operand_0 <- operand_1 (joik_ek stag? KE_clause free* operand KEhE_elidible free*)?



operand_start <- quantifier / lerfu_word / gek / LAhE_clause / NAhE_clause

operand_1 <- operand_2 (joik_ek operand_2)*

operand_2 <- operand_3 (joik_ek stag? BO_clause free* operand_2)?

# BETA: NAhE+SUMTI
operand_3 <- quantifier / lerfu_string !MOI_clause BOI_elidible free* / gek operand gik operand_3 / (LAhE_clause free* / NAhE_clause BO_clause? free*) operand LUhU_elidible free*

# BETA: MEX simplification
# FIXME: forethought mex not possible anymore without pe'o. BIhE_clause isn't referenced anymore.
number <- PA_clause+

lerfu_string <- lerfu_word (PA_clause / lerfu_word)*

# ** BU clauses are part of BY_clause
lerfu_word <- BY_clause

ek <- NA_clause? SE_clause? A_clause NAI_clause?

#; gihek = NA_clause? SE_clause? GIhA_clause NAI_clause?
gihek <- gihek_1

gihek_1 <- NA_clause? SE_clause? GIhA_clause NAI_clause?



jek <- NA_clause? SE_clause? JA_clause NAI_clause?

joik <- SE_clause? JOI_clause NAI_clause?

#; joik_ek = joik free* / ek free*
joik_ek <- joik_ek_1

# BETA: A/JA/JOI/VUhU Merger
joik_ek_1 <- joik_jek



# BETA: A/JA/JOI/VUhU Merger
joik_jek <- joik free* / ek free* / jek free*

# BETA: gaJA
gek <- gak SE_clause? joik_jek / SE_clause? GA_clause free* / joik GI_clause free* / stag gik

# BETA: gaJA
gak <- ga_clause !gek free*

# BETA: guJA
guhek <- guk SE_clause? joik_jek

# BETA: guJA
guk <- gu_clause !gek free*

gik <- GI_clause NAI_clause? free*

tag <- tense_modal (joik_jek tense_modal)*

#stag = simple_tense_modal ((jek / joik) simple_tense_modal)*

# BETA: Tag simplification
stag <- tense_modal (joik_jek tense_modal)*

# BETA: Tag simplification (dependency: NAI ∈ indicator)
# FIXME: Cannot use bare MEX with ROI.
tense_modal <- ((NAhE_clause? SE_clause? (BAI_clause / ZI_clause / PU_clause / FAhA_clause / number ROI_clause / ZAhO_clause / FA_clause) free*)+)

free <- vocative relative_clauses? selbri relative_clauses? DOhU_elidible / vocative relative_clauses? CMEVLA_clause+ free* relative_clauses? DOhU_elidible / vocative sumti? DOhU_elidible / mex_2 MAI_clause free*

vocative <- (COI_clause NAI_clause?)+

indicators <- indicator+

# BETA: NAI ∈ indicator
indicator <- ((UI_clause / CAI_clause) NAI_clause? / NAI_clause) !BU_clause


# ****************
# Magic Words
# ****************

bu_clause <- pre_clause bu_clause_no_pre
bu_clause_no_pre <- pre_zei_bu BU_clause+ post_clause  #: LR

bu_tail <- BU_clause+ # Obsolete: please use BU_clause+ instead for allowing later left-grouping faking.

pre_zei_bu <- !ZOI_start !BU_clause any_word_pre
# LOhU_pre / ZO_pre / ZOI_pre / !BU_clause any_word_pre

any_word_pre <- BRIVLA_pre / CMAVO_pre / CMEVLA_pre

dot_star <- .*  #: LEAF

# __ General Morphology Issues
#
# 1.  Spaces (including '.y') and UI are eaten *after* a word.
#
# 3.  BAhE is eaten *before* a word.

# Handling of what can go after a cmavo
post_clause <- spaces? !BU_clause indicators*

# pre_clause <- BAhE_clause*  #: LR
pre_clause <- #: LR


# ___ ELIDIBLE TERMINATORS ___

BEhO_elidible <- BEhO_clause?
BOI_elidible <- BOI_clause?
CU_elidible <- CU_clause?
DOhU_elidible <- DOhU_clause?
# FOI and FUhO are never elidible
GEhU_elidible <- GEhU_clause?
KEI_elidible <- KEI_clause?
KEhE_elidible <- KEhE_clause?
KU_elidible <- KU_clause?
KUhO_elidible <- KUhO_clause?
# LEhU is never elidible
LIhU_elidible <- LIhU_clause?
LOhO_elidible <- LOhO_clause?
LUhU_elidible <- LUhU_clause?
MEhU_elidible <- MEhU_clause?
VAU_elidible <- VAU_clause?


# ___ SELMAHO ___
# Do *NOT* delete the line above!

BRIVLA_clause <- BRIVLA_pre BRIVLA_post
BRIVLA_pre <- pre_clause BRIVLA spaces?
BRIVLA_post <- post_clause

CMEVLA_clause <- CMEVLA_pre CMEVLA_post
CMEVLA_pre <- pre_clause CMEVLA spaces?
CMEVLA_post <- post_clause

CMAVO_clause <- CMAVO_pre CMAVO_post
CMAVO_pre <- pre_clause CMAVO spaces?
CMAVO_post <- post_clause

#         eks; basic afterthought logical connectives
A_clause <- A_pre A_post
A_pre <- pre_clause A spaces?
A_post <- post_clause


#         modal operators
BAI_clause <- BAI_pre BAI_post
BAI_pre <- pre_clause BAI spaces?
BAI_post <- post_clause

#         sumti link to attach sumti to a selbri
BE_clause <- BE_pre BE_post
BE_pre <- pre_clause BE spaces?
BE_post <- post_clause

#         multiple sumti separator between BE, BEI
BEI_clause <- BEI_pre BEI_post
BEI_pre <- pre_clause BEI spaces?
BEI_post <- post_clause

#         terminates BEBEI specified descriptors
BEhO_clause <- BEhO_pre BEhO_post
BEhO_pre <- pre_clause BEhO spaces?
BEhO_post <- post_clause

#         joins two units with shortest scope
BO_clause <- BO_pre BO_post
BO_pre <- pre_clause BO spaces?
BO_post <- post_clause

#         number or lerfu_string terminator
BOI_clause <- BOI_pre BOI_post
BOI_pre <- pre_clause BOI spaces?
BOI_post <- post_clause

#         turns any word into a BY lerfu word
BU_clause <- BU_pre BU_post

BU_pre <- pre_clause BU spaces?

BU_post <- spaces?

#         individual lerfu words
BY_clause <- BY_pre BY_post / bu_clause
BY_pre <- pre_clause BY spaces?
BY_post <- post_clause

#         afterthought intensity marker
CAI_clause <- CAI_pre CAI_post
CAI_pre <- pre_clause CAI spaces?
CAI_post <- post_clause

#         tanru inversion
CO_clause <- CO_pre CO_post
CO_pre <- pre_clause CO spaces?
CO_post <- post_clause

COI_clause <- COI_pre COI_post
COI_pre <- pre_clause COI spaces?
COI_post <- post_clause

#         vocative marker permitted inside names; must
#         separator between head sumti and selbri
CU_clause <- CU_pre CU_post
CU_pre <- pre_clause CU spaces?
CU_post <- post_clause

#         terminator for DOI_marked vocatives
DOhU_clause <- DOhU_pre DOhU_post
DOhU_pre <- pre_clause DOhU spaces?
DOhU_post <- post_clause


#         modifier head generic case tag
FA_clause <- FA_pre FA_post
FA_pre <- pre_clause FA spaces?
FA_post <- post_clause

#         superdirections in space
FAhA_clause <- FAhA_pre FAhA_post
FAhA_pre <- pre_clause FAhA spaces?
FAhA_post <- post_clause


#         normally elided 'done pause' to indicate end
#                                    of utterance string

#         geks; forethought logical connectives
GA_clause <- GA_pre GA_post
GA_pre <- pre_clause GA spaces?
GA_post <- post_clause
 
#         marker ending GOI relative clauses
GEhU_clause <- GEhU_pre GEhU_post
GEhU_pre <- pre_clause GEhU spaces?
GEhU_post <- post_clause
# GEhU_no_SA_handling = pre_clause GEhU post_clause

#         forethought medial marker
GI_clause <- GI_pre GI_post
GI_pre <- pre_clause GI spaces?
GI_post <- post_clause

#         logical connectives for bridi_tails
GIhA_clause <- GIhA_pre GIhA_post
GIhA_pre <- pre_clause GIhA spaces?
GIhA_post <- post_clause

#         attaches a sumti modifier to a sumti
GOI_clause <- GOI_pre GOI_post
GOI_pre <- pre_clause GOI spaces?
GOI_post <- post_clause

#         pro_bridi
GOhA_clause <- GOhA_pre GOhA_post
GOhA_pre <- pre_clause GOhA spaces?
GOhA_post <- post_clause

#         sentence link
I_clause <- I_pre I_post
I_pre <- pre_clause I spaces?
I_post <- post_clause


#         jeks; logical connectives within tanru
JA_clause <- JA_pre JA_post
JA_pre <- pre_clause JA spaces?
JA_post <- post_clause

#         non_logical connectives
JOI_clause <- JOI_pre JOI_post
JOI_pre <- pre_clause JOI spaces?
JOI_post <- post_clause


#         left long scope marker
KE_clause <- KE_pre KE_post
KE_pre <- pre_clause KE spaces?
KE_post <- post_clause

#         right terminator for KE groups
KEhE_clause <- KEhE_pre KEhE_post
KEhE_pre <- pre_clause KEhE spaces?
KEhE_post <- post_clause

#         right terminator, NU abstractions
KEI_clause <- KEI_pre KEI_post
KEI_pre <- pre_clause KEI spaces?
KEI_post <- post_clause

#         sumti anaphora
KOhA_clause <- KOhA_pre KOhA_post
KOhA_pre <- pre_clause KOhA spaces?
KOhA_post <- post_clause

#         right terminator for descriptions, etc.
KU_clause <- KU_pre KU_post
KU_pre <- pre_clause KU spaces?
KU_post <- post_clause

#         right terminator, NOI relative clauses
KUhO_clause <- KUhO_pre KUhO_post
KUhO_pre <- pre_clause KUhO spaces?
KUhO_post <- post_clause


#         name descriptors
LA_clause <- LA_pre LA_post
LA_pre <- pre_clause LA spaces?
LA_post <- post_clause

#         sumti qualifiers
LAhE_clause <- LAhE_pre LAhE_post
LAhE_pre <- pre_clause LAhE spaces?
LAhE_post <- post_clause

#         sumti descriptors
LE_clause <- LE_pre LE_post
LE_pre <- pre_clause LE spaces?
LE_post <- post_clause


#         possibly ungrammatical text right quote
LEhU_clause <- LEhU_pre LEhU_post
LEhU_pre <- pre_clause LEhU spaces?
LEhU_post <- spaces?



#         convert number to sumti
LI_clause <- LI_pre LI_post
LI_pre <- pre_clause LI spaces?
LI_post <- post_clause

#         grammatical text right quote
LIhU_clause <- LIhU_pre LIhU_post
LIhU_pre <- pre_clause LIhU spaces?
LIhU_post <- post_clause

#         elidable terminator for LI
LOhO_clause <- LOhO_pre LOhO_post
LOhO_pre <- pre_clause LOhO spaces?
LOhO_post <- post_clause

#         possibly ungrammatical text left quote
LOhU_clause <- LOhU_pre LOhU_post
LOhU_pre <- pre_clause LOhU spaces? (!LEhU any_word)* LEhU_clause spaces?
LOhU_post <- post_clause

#         grammatical text left quote
LU_clause <- LU_pre LU_post
LU_pre <- pre_clause LU spaces?
LU_post <- spaces? !BU_clause
# LU_post isn't post_clause for avoiding indicators to attach to LU in the parse tree.

#         LAhE close delimiter
LUhU_clause <- LUhU_pre LUhU_post
LUhU_pre <- pre_clause LUhU spaces?
LUhU_post <- post_clause

#         change numbers to utterance ordinals
MAI_clause <- MAI_pre MAI_post
MAI_pre <- pre_clause MAI spaces?
MAI_post <- post_clause

#         converts a sumti into a tanru_unit
ME_clause <- ME_pre ME_post
ME_pre <- pre_clause ME spaces?
ME_post <- post_clause

#         terminator for ME
MEhU_clause <- MEhU_pre MEhU_post
MEhU_pre <- pre_clause MEhU spaces?
MEhU_post <- post_clause

#         change number to selbri
MOI_clause <- MOI_pre MOI_post
MOI_pre <- pre_clause MOI spaces?
MOI_post <- post_clause


#         bridi negation
NA_clause <- NA_pre NA_post
NA_pre <- pre_clause NA spaces?
NA_post <- post_clause

#         attached to words to negate them
NAI_clause <- NAI_pre NAI_post
NAI_pre <- pre_clause NAI spaces?
NAI_post <- post_clause

#         scalar negation
NAhE_clause <- NAhE_pre NAhE_post
NAhE_pre <- pre_clause NAhE spaces?
NAhE_post <- post_clause

#         attaches a subordinate clause to a sumti
NOI_clause <- NOI_pre NOI_post
NOI_pre <- pre_clause NOI spaces?
NOI_post <- post_clause

#         abstraction
NU_clause <- NU_pre NU_post
NU_pre <- pre_clause NU spaces?
NU_post <- post_clause

#         numbers and numeric punctuation
PA_clause <- PA_pre PA_post
PA_pre <- pre_clause PA spaces?
PA_post <- post_clause

#         directions in time
PU_clause <- PU_pre PU_post
PU_pre <- pre_clause PU spaces?
PU_post <- post_clause

#         converts number to extensional tense
ROI_clause <- ROI_pre ROI_post
ROI_pre <- pre_clause ROI spaces?
ROI_post <- post_clause

#         metalinguistic eraser to the beginning of

#                                    the current utterance

#         conversions
SE_clause <- SE_pre SE_post
SE_pre <- pre_clause SE spaces?
SE_post <- post_clause

#         conversions
VAU_clause <- VAU_pre VAU_post
VAU_pre <- pre_clause VAU spaces?
VAU_post <- post_clause

#         attitudinals, observationals, discursives
UI_clause <- UI_pre UI_post
UI_pre <- pre_clause UI spaces?
UI_post <- post_clause


#         event properties _ inchoative, etc.
ZAhO_clause <- ZAhO_pre ZAhO_post
ZAhO_pre <- pre_clause ZAhO spaces?
ZAhO_post <- post_clause

#         time distance tense
ZI_clause <- ZI_pre ZI_post
ZI_pre <- pre_clause ZI spaces?
ZI_post <- post_clause

#         single word metalinguistic quote marker
ZO_clause <- ZO_pre ZO_post
ZO_pre <- pre_clause ZO spaces? any_word spaces?
ZO_post <- post_clause

#         delimited quote marker
ZOI_clause <- ZOI_pre ZOI_post
ZOI_pre <- pre_clause ZOI spaces? zoi_open spaces? (zoi_word spaces)* zoi_close spaces?
ZOI_post <- post_clause
ZOI_start <- !ZOI_pre ZOI

#         prenex terminator (not elidable)
ZOhU_clause <- ZOhU_pre ZOhU_post
ZOhU_pre <- pre_clause ZOhU spaces?
ZOhU_post <- post_clause

# BEGIN BETA: gaJA, guJA
ga_clause <- ga_pre ga_post
ga_pre <- pre_clause ga_word spaces?
ga_post <- post_clause
ga_word <- &cmavo ( g a ) &post_word

gu_clause <- gu_pre gu_post
gu_pre <- pre_clause gu_word spaces?
gu_post <- post_clause
gu_word <- &cmavo ( g u ) &post_word
# END BETA: gaJA, guJA



# ___ MORPHOLOGY ___

CMEVLA <- cmevla
BRIVLA <- gismu / lujvo / fuhivla

# BETA: ZOhOI
CMAVO <- A / BAI / BE / BEI / BEhO / BO / BOI / BU / BY / CAI / CO / COI / CU / DOhU / FA / FAhA / GA / GEhU / GI / GIhA / GOI / GOhA / I / JA / JOI / KE / KEhE / KEI / KOhA / KU / KUhO / LA / LAhE / LE / LEhU / LI / LIhU / LOhO / LOhU / LU / LUhU / MAI / ME / MEhU / MOI / NA / NAI / NAhE / NOI / NU / PA / PU / ROI / SE / VAU / UI / ZAhO / ZI / ZO / ZOI

# This is a Parsing Expression Grammar for the morphology of Lojban.
# See http://www.pdos.lcs.mit.edu/~baford/packrat/
#
# All rules have the form
#
# name = peg_expression
#
# which means that the grammatical construct "name" is parsed using
# "peg_expression".
#
# 1) Concatenation is expressed by juxtaposition with no operator symbol.
# 2) / represents *ORDERED* alternation (choice). If the first
# option succeeds, the others will never be checked.
# 3) ? indicates that the element to the left is optional.
# 4) * represents optional repetition of the construct to the left.
# 5) + represents one_or_more repetition of the construct to the left.
# 6) () serves to indicate the grouping of the other operators.
# 7) & indicates that the element to the right must follow (but the
# marked element itself does not absorb anything).
# 8) ! indicates that the element to the right must not follow (the
# marked element itself does not absorb anything).
# 9) . represents any character.
# 10) ' ' or " " represents a literal string.
# 11) [] represents a character class.
#
# Repetitions grab as much as they can.
#
#
# ___ GRAMMAR ___
# This grammar classifies words by their morphological class (cmevla,
# gismu, lujvo, fuhivla, cmavo, and non_lojban_word).
#
#The final section sorts cmavo into grammatical classes (A, BAI, ..., ZOhU).
#
# mi'e ((xorxes))

#___________________________________________________________________

# words = expr:(pause? (word pause?)*) { return _join(expr); }

# word = expr:lojban_word / non_lojban_word { return expr; }

# lojban_word = expr:(cmevla / cmavo / brivla) { return expr; }
lojban_word <- CMEVLA / CMAVO / BRIVLA

any_word <- lojban_word spaces?

# === ZOI quote handling ===

# Pure PEG cannot handle ZOI quotes, because it cannot check whether the closing
# delimiter is the same as the opening one.
# ZOI quote handling is the only part of Lojban's grammar that needs mechanisms
# external to the pure PEG grammar to be implemented properly; those mechanisms
# are implementation-specific.

zoi_open <- lojban_word  #: PUSH
# Non-PEG: Remember the value matched by this zoi_open.

zoi_word_2 <- non_space+  #: LEAF

zoi_word <- zoi_word_2 #: PEEK-DIFF
# Non-PEG: Match successfully only if different from the most recent zoi_open.

zoi_close <- any_word  #: POP-EQ
# Non-PEG: Match successfully only if identical to the most recent zoi_open.

# BETA: ZOhOI
zohoi_word <- non_space+

#___________________________________________________________________

cmevla <- jbocme / zifcme

zifcme <- !h (nucleus / glide / h / consonant !pause / digit)* consonant &pause

jbocme <- &zifcme (any_syllable / digit)+ &pause

#cmevla = !h cmevla_syllable* &consonant coda? consonantal_syllable* onset &pause

#cmevla_syllable = !doi_la_lai_lahi coda? consonantal_syllable* onset nucleus / digit

#doi_la_lai_lahi = (d o i / l a (h? i)?) !h !nucleus

#___________________________________________________________________

cmavo <- !cmevla !CVCy_lujvo cmavo_form &post_word

CVCy_lujvo <- CVC_rafsi y h? initial_rafsi* brivla_core / stressed_CVC_rafsi y short_final_rafsi

cmavo_form <- !h !cluster onset (nucleus h)* (!stressed nucleus / nucleus !cluster) / y+ / digit

#___________________________________________________________________

brivla <- !cmavo initial_rafsi* brivla_core

brivla_core <- fuhivla / gismu / CVV_final_rafsi / stressed_initial_rafsi short_final_rafsi

stressed_initial_rafsi <- stressed_extended_rafsi / stressed_y_rafsi / stressed_y_less_rafsi

initial_rafsi <- extended_rafsi / y_rafsi / !any_extended_rafsi y_less_rafsi !any_extended_rafsi

#___________________________________________________________________

any_extended_rafsi <- fuhivla / extended_rafsi / stressed_extended_rafsi

fuhivla <- fuhivla_head stressed_syllable consonantal_syllable* final_syllable

stressed_extended_rafsi <- stressed_brivla_rafsi / stressed_fuhivla_rafsi

extended_rafsi <- brivla_rafsi / fuhivla_rafsi

stressed_brivla_rafsi <- &unstressed_syllable brivla_head stressed_syllable h y

brivla_rafsi <- &(syllable consonantal_syllable* syllable) brivla_head h y h?

stressed_fuhivla_rafsi <- fuhivla_head stressed_syllable consonantal_syllable* !h onset y

fuhivla_rafsi <- &unstressed_syllable fuhivla_head !h onset y h?

fuhivla_head <- !rafsi_string brivla_head

brivla_head <- !cmavo !slinkuhi !h &onset unstressed_syllable*

slinkuhi <- !rafsi_string consonant rafsi_string

rafsi_string <- y_less_rafsi* (gismu / CVV_final_rafsi / stressed_y_less_rafsi short_final_rafsi / y_rafsi / stressed_y_rafsi / stressed_y_less_rafsi? initial_pair y / hy_rafsi / stressed_hy_rafsi)

#___________________________________________________________________

gismu <- (initial_pair stressed_vowel / consonant stressed_vowel consonant) &final_syllable consonant vowel &post_word

CVV_final_rafsi <- consonant stressed_vowel h &final_syllable vowel &post_word

short_final_rafsi <- &final_syllable (consonant diphthong / initial_pair vowel) &post_word

stressed_y_rafsi <- (stressed_long_rafsi / stressed_CVC_rafsi) y

stressed_y_less_rafsi <- stressed_CVC_rafsi !y / stressed_CCV_rafsi / stressed_CVV_rafsi

stressed_long_rafsi <- initial_pair stressed_vowel consonant / consonant stressed_vowel consonant consonant

stressed_CVC_rafsi <- consonant stressed_vowel consonant

stressed_CCV_rafsi <- initial_pair stressed_vowel

stressed_CVV_rafsi <- consonant (unstressed_vowel h stressed_vowel / stressed_diphthong) r_hyphen?

y_rafsi <- (long_rafsi / CVC_rafsi) y h?

y_less_rafsi <- !y_rafsi !stressed_y_rafsi !hy_rafsi !stressed_hy_rafsi (CVC_rafsi / CCV_rafsi / CVV_rafsi) !h

hy_rafsi <- (long_rafsi vowel / CCV_rafsi / CVV_rafsi) h y h?

stressed_hy_rafsi <- (long_rafsi stressed_vowel / stressed_CCV_rafsi / stressed_CVV_rafsi) h y

long_rafsi <- initial_pair unstressed_vowel consonant / consonant unstressed_vowel consonant consonant

CVC_rafsi <- consonant unstressed_vowel consonant

CCV_rafsi <- initial_pair unstressed_vowel

CVV_rafsi <- consonant (unstressed_vowel h unstressed_vowel / unstressed_diphthong) r_hyphen?

r_hyphen <- r &consonant / n &r

#___________________________________________________________________

final_syllable <- onset !y !stressed nucleus !cmevla &post_word

stressed_syllable <- &stressed syllable / syllable &stress

stressed_diphthong <- &stressed diphthong / diphthong &stress

stressed_vowel <- &stressed vowel / vowel &stress

unstressed_syllable <- !stressed syllable !stress / consonantal_syllable

unstressed_diphthong <- !stressed diphthong !stress

unstressed_vowel <- !stressed vowel !stress

#// FIX: Xorxes' fix for fu'ivla rafsi stress
stress <- (consonant / glide)* h? y? syllable pause

stressed <- onset comma* [AEIOU]

any_syllable <- onset nucleus coda? / consonantal_syllable

syllable <- onset !y nucleus coda?

#// FIX: preventing {bla'ypre} from being a valid lujvo
consonantal_syllable <- consonant &syllabic coda

coda <- !any_syllable consonant &any_syllable / syllabic? consonant? &pause

onset <- h / glide / initial

nucleus <- vowel / diphthong / y !nucleus

#_________________________________________________________________

glide <- (i / u) &nucleus

diphthong <- (a i !i / a u !u / e i !i / o i !i) !nucleus

vowel <- (a / e / i / o / u) !nucleus

a <- comma* [aA]

e <- comma* [eE]

i <- comma* [iI]

o <- comma* [oO]

u <- comma* [uU]

y <- comma* [yY] !(!y nucleus)



#___________________________________________________________________

cluster <- consonant consonant+

initial_pair <- &initial consonant consonant !consonant

initial <- (affricate / sibilant? other? liquid?) !consonant !glide

affricate <- t c / t s / d j / d z

liquid <- l / r

other <- p / t !l / k / f / x / b / d !l / g / v / m / n !liquid

sibilant <- c / s !x / (j / z) !n !liquid

consonant <- voiced / unvoiced / syllabic

syllabic <- l / m / n / r

voiced <- b / d / g / j / v / z

unvoiced <- c / f / k / p / s / t / x

l <- comma* [lL] !h !glide !l

m <- comma* [mM] !h !glide !m !z

n <- comma* [nN] !h !glide !n !affricate

r <- comma* [rR] !h !glide !r

b <- comma* [bB] !h !glide !b !unvoiced

d <- comma* [dD] !h !glide !d !unvoiced

g <- comma* [gG] !h !glide !g !unvoiced

v <- comma* [vV] !h !glide !v !unvoiced

j <- comma* [jJ] !h !glide !j !z !unvoiced

z <- comma* [zZ] !h !glide !z !j !unvoiced

s <- comma* [sS] !h !glide !s !c !voiced

c <- comma* [cC] !h !glide !c !s !x !voiced

x <- comma* [xX] !h !glide !x !c !k !voiced

k <- comma* [kK] !h !glide !k !x !voiced

f <- comma* [fF] !h !glide !f !voiced

p <- comma* [pP] !h !glide !p !voiced

t <- comma* [tT] !h !glide !t !voiced

h <- comma* ['h] &nucleus

#___________________________________________________________________

digit <- comma* [0123456789] !h !nucleus

post_word <- pause / !nucleus lojban_word

pause <- comma* space_char+ / EOF

EOF <- comma* !.

comma <- [,]

# This is an orphan rule.
non_lojban_word <- !lojban_word non_space+

non_space <- !space_char .  #: JOIN

#Unicode_style and escaped chars not compatible with cl_peg
space_char <- [.\t\n\r?!\u0020]  #: JOIN

# space_char = [.?! ] / space_char1 / space_char2
# space_char1 = '    '
# space_char2 = ''

#___________________________________________________________________

spaces <- (comma* space_char)+ EOF? / EOF  #: LEAF

ybu <- Y space_char* BU

lujvo <- !gismu !fuhivla brivla

#___________________________________________________________________

A <- &cmavo ( a / e / j i / o / u ) &post_word

BAI <- &cmavo ( d u h o / s i h u / z a u / k i h i / d u h i / c u h u / t u h i / t i h u / d i h o / j i h u / r i h a / n i h i / m u h i / k i h u / v a h u / k o i / c a h i / t a h i / p u h e / j a h i / k a i / b a i / f i h e / d e h i / c i h o / m a u / m u h u / r i h i / r a h i / k a h a / p a h u / p a h a / l e h a / k u h u / t a i / b a u / m a h i / c i h e / f a u / p o h i / c a u / m a h e / c i h u / r a h a / p u h a / l i h e / l a h u / b a h i / k a h i / s a u / f a h e / b e h i / t i h i / j a h e / g a h a / v a h o / j i h o / m e h a / d o h e / j i h e / p i h o / g a u / z u h e / m e h e / r a i ) &post_word

BE <- &cmavo ( b e ) &post_word

BEI <- &cmavo ( b e i ) &post_word

BEhO <- &cmavo ( b e h o ) &post_word

BO <- &cmavo ( b o ) &post_word

BOI <- &cmavo ( b o i ) &post_word

BU <- &cmavo ( b u ) &post_word

# BETA: a'y, e'y, i'y, o'y, u'y, iy, uy
BY <- &cmavo ( ybu / j o h o / r u h o / g e h o / j e h o / l o h a / n a h a / s e h e / t o h a / g a h e / y h y / a h y / e h y / i h y / o h y / u h y / i y / u y / b y / c y / d y / f y / g y / j y / k y / l y / m y / n y / p y / r y / s y / t y / v y / x y / z y ) &post_word

CAI <- &cmavo ( p e i / c a i / c u h i / s a i / r u h e ) &post_word

CO <- &cmavo ( c o ) &post_word

# BETA: di'ai, jo'au, co'oi, da'oi, ki'ai, sa'ei
COI <- &cmavo ( d o i / d i h a i / j o h a u / c o h o i / d a h o i / k i h a i / s a h e i / j u h i / c o i / f i h i / t a h a / m u h o / f e h o / c o h o / p e h u / k e h o / n u h e / r e h i / b e h e / j e h e / m i h e / k i h e / v i h o ) &post_word

CU <- &cmavo ( c u ) &post_word

DOhU <- &cmavo ( d o h u ) &post_word

FA <- &cmavo ( f a i / f a / f e / f o / f u / f i h a / f i ) &post_word

FAhA <- &cmavo ( d u h a / b e h a / n e h u / v u h a / g a h u / t i h a / n i h a / c a h u / z u h a / r i h u / r u h u / r e h o / t e h e / b u h u / n e h a / p a h o / n e h i / t o h o / z o h i / z e h o / z o h a / f a h a ) &post_word &post_word

GA <- &cmavo ( g e h i / g e / g o / g a / g u ) &post_word

GEhU <- &cmavo ( g e h u ) &post_word

GI <- &cmavo ( g i ) &post_word

GIhA <- &cmavo ( g i h e / g i h i / g i h o / g i h a / g i h u ) &post_word

GOI <- &cmavo ( n o h u / n e / g o i / p o h u / p e / p o h e / p o ) &post_word

GOhA <- &cmavo ( m o / n e i / g o h u / g o h o / g o h i / n o h a / g o h e / g o h a / d u / b u h a / b u h e / b u h i / c o h e ) &post_word

I <- &cmavo ( i ) &post_word

JA <- &cmavo ( j e h i / j e / j o / j a / j u ) &post_word

JOI <- &cmavo ( f a h u / p i h u / j o i / c e h o / c e / j o h u / k u h a / j o h e / j u h e ) &post_word

KE <- &cmavo ( k e ) &post_word

KEhE <- &cmavo ( k e h e ) &post_word

KEI <- &cmavo ( k e i ) &post_word

# BETA: xai, zu'ai
KOhA <- &cmavo ( z u h a i / d a h u / d a h e / d i h u / d i h e / d e h u / d e h e / d e i / d o h i / m i h o / m a h a / m i h a / d o h o / k o h a / f o h u / k o h e / k o h i / k o h o / k o h u / f o h a / f o h e / f o h i / f o h o / v o h a / v o h e / v o h i / v o h o / v o h u / r u / r i / r a / t a / t u / t i / z i h o / k e h a / m a / z u h i / z o h e / c e h u / x a i / d a / d e / d i / k o / m i / d o ) &post_word

KU <- &cmavo ( k u ) &post_word

KUhO <- &cmavo ( k u h o ) &post_word

# BETA: la'ei
LA <- &cmavo ( l a h e i / l a i / l a h i / l a ) &post_word

# BETA: zo'ei
LAhE <- &cmavo ( z o h e i / t u h a / l u h a / l u h o / l a h e / v u h i / l u h i / l u h e ) &post_word

# BETA: me'ei, mo'oi, ri'oi
LE <- &cmavo ( m e h e i / m o h o i / r i h o i / l e i / l o i / l e h i / l o h i / l e h e / l o h e / l o / l e ) &post_word

LEhU <- &cmavo ( l e h u ) &post_word

LI <- &cmavo ( m e h o / l i ) &post_word

LIhU <- &cmavo ( l i h u ) &post_word

LOhO <- &cmavo ( l o h o ) &post_word

LOhU <- &cmavo ( l o h u ) &post_word

# BETA: la'au
LU <- &cmavo ( l a h a u / l u ) &post_word

LUhU <- &cmavo ( l u h u ) &post_word

# BETA: ju'ai
MAI <- &cmavo ( m o h o / m a i / j u h a i ) &post_word

# BETA: me'au
ME <- &cmavo (m e h a u / m e) &post_word

MEhU <- &cmavo ( m e h u ) &post_word

MOI <- &cmavo ( m e i / m o i / s i h e / c u h o / v a h e ) &post_word

NA <- &cmavo ( j a h a / n a ) &post_word

# BETA: ja'ai
NAI <- &cmavo ( n a i / j a h a i ) &post_word

NAhE <- &cmavo ( t o h e / j e h a / n a h e / n o h e ) &post_word

# BETA: ji'oi
NOI <- &cmavo ( v o i / n o i / p o i ) &post_word

# BETA: poi'i, kai'u
NU <- &cmavo ( p o i h i / k a i h u / n i / d u h u / s i h o / n u / l i h i / k a / j e i / s u h u / z u h o / m u h e / p u h u / z a h i ) &post_word

# BETA: xo'e, su'oi, ro'oi
PA <- &cmavo ( s u h o i / r o h o i / x o h e / d a u / f e i / g a i / j a u / r e i / v a i / p i h e / p i / f i h u / z a h u / m e h i / n i h u / k i h o / c e h i / m a h u / r a h e / d a h a / s o h a / j i h i / s u h o / s u h e / r o / r a u / s o h u / s o h i / s o h e / s o h o / m o h a / d u h e / t e h o / k a h o / c i h i / t u h o / x o / p a i / n o h o / n o / p a / r e / c i / v o / m u / x a / z e / b i / s o / digit ) &post_word

PU <- &cmavo ( b a / p u / c a ) &post_word

# BETA: va'ei, mu'ei
ROI <- &cmavo ( r e h u / r o i / v a h e i / m u h e i ) &post_word

SE <- &cmavo ( s e / t e / v e / x e ) &post_word

VAU <- &cmavo ( v a u ) &post_word

# BETA: ko'oi, si'au, o'ai, xe'e, xo'o
UI <- &cmavo ( k o h o i / s i h a u / a h o i / o h a i / x e h e / x o h o / i h a / i e / a h e / u h i / i h o / i h e / a h a / i a / o h i / o h e / e h e / o i / u o / e h i / u h o / a u / u a / a h i / i h u / i i / u h a / u i / a h o / a i / a h u / i u / e i / o h o / e h a / u u / o h a / o h u / u h u / e h o / i o / e h u / u e / i h i / u h e / b a h a / j a h o / c a h e / s u h a / t i h e / k a h u / s e h o / z a h a / p e h i / r u h a / j u h a / t a h o / r a h u / l i h a / b a h u / m u h a / d o h a / t o h u / v a h i / p a h e / z u h u / s a h e / l a h a / k e h u / s a h u / d a h i / j e h u / s a h a / k a u / t a h u / n a h i / j o h a / b i h u / l i h o / p a u / m i h u / k u h i / j i h a / s i h a / p o h o / p e h a / r o h i / r o h e / r o h o / r o h u / r o h a / r e h e / l e h o / j u h o / f u h i / d a i / g a h i / z o h o / b e h u / r i h e / s e h i / s e h a / v u h e / k i h a / x u / g e h e / b u h o ) &post_word

Y <- &cmavo ( y ) &post_word

# BETA: xa'o
ZAhO <- &cmavo ( c o h i / p u h o / c o h u / m o h u / c a h o / c o h a / d e h a / b a h o / d i h a / z a h o / x a h o ) &post_word

ZI <- &cmavo ( z u / z a / z i ) &post_word

# BETA: ma'oi
ZO <- &cmavo ( z o / m a h o i ) &post_word

ZOI <- &cmavo ( z o i / l a h o ) &post_word

# BETA: ce'ai
ZOhU <- &cmavo ( c e h a i / z o h u ) &post_word

